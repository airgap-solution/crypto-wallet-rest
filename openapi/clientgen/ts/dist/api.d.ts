/**
 * Crypto Wallet REST API
 * REST API for air-gapped crypto wallets. Supports multiple cryptocurrencies with fiat currency conversion, future-proof.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface BalanceGet200Response
 */
export interface BalanceGet200Response {
    /**
     * The cryptocurrency symbol
     * @type {string}
     * @memberof BalanceGet200Response
     */
    'crypto_symbol': string;
    /**
     * The queried address
     * @type {string}
     * @memberof BalanceGet200Response
     */
    'address': string;
    /**
     * Balance in the native cryptocurrency units
     * @type {number}
     * @memberof BalanceGet200Response
     */
    'crypto_balance': number;
    /**
     * The fiat currency symbol used for conversion
     * @type {string}
     * @memberof BalanceGet200Response
     */
    'fiat_symbol': string;
    /**
     * Equivalent value in the specified fiat currency
     * @type {number}
     * @memberof BalanceGet200Response
     */
    'fiat_value': number;
    /**
     * Current exchange rate (crypto to fiat)
     * @type {number}
     * @memberof BalanceGet200Response
     */
    'exchange_rate': number;
    /**
     * Timestamp when the balance was retrieved
     * @type {string}
     * @memberof BalanceGet200Response
     */
    'timestamp': string;
}
/**
 *
 * @export
 * @interface BroadcastPost200Response
 */
export interface BroadcastPost200Response {
    /**
     *
     * @type {string}
     * @memberof BroadcastPost200Response
     */
    'crypto_symbol': string;
    /**
     * Transaction hash/ID
     * @type {string}
     * @memberof BroadcastPost200Response
     */
    'transaction_id': string;
    /**
     *
     * @type {string}
     * @memberof BroadcastPost200Response
     */
    'status': BroadcastPost200ResponseStatusEnum;
    /**
     * Human-readable status message
     * @type {string}
     * @memberof BroadcastPost200Response
     */
    'message': string;
    /**
     * Actual network fee paid
     * @type {string}
     * @memberof BroadcastPost200Response
     */
    'network_fee'?: string;
    /**
     *
     * @type {string}
     * @memberof BroadcastPost200Response
     */
    'timestamp': string;
}
export declare const BroadcastPost200ResponseStatusEnum: {
    readonly Success: "success";
    readonly Pending: "pending";
    readonly Failed: "failed";
};
export type BroadcastPost200ResponseStatusEnum = typeof BroadcastPost200ResponseStatusEnum[keyof typeof BroadcastPost200ResponseStatusEnum];
/**
 *
 * @export
 * @interface BroadcastPostRequest
 */
export interface BroadcastPostRequest {
    /**
     * The cryptocurrency symbol
     * @type {string}
     * @memberof BroadcastPostRequest
     */
    'crypto_symbol': string;
    /**
     * Base64 or hex encoded signed transaction
     * @type {string}
     * @memberof BroadcastPostRequest
     */
    'signed_tx': string;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * Error type
     * @type {string}
     * @memberof ErrorResponse
     */
    'error': string;
    /**
     * Human-readable error message
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponse
     */
    'timestamp': string;
}
/**
 *
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * Transaction hash/ID
     * @type {string}
     * @memberof Transaction
     */
    'transaction_id': string;
    /**
     * Block height (null if unconfirmed)
     * @type {number}
     * @memberof Transaction
     */
    'block_height'?: number;
    /**
     * Transaction timestamp
     * @type {string}
     * @memberof Transaction
     */
    'timestamp': string;
    /**
     * Transaction amount in crypto units
     * @type {string}
     * @memberof Transaction
     */
    'amount': string;
    /**
     * Transaction direction relative to the queried address
     * @type {string}
     * @memberof Transaction
     */
    'direction': TransactionDirectionEnum;
    /**
     * Number of confirmations
     * @type {number}
     * @memberof Transaction
     */
    'confirmations': number;
    /**
     * Transaction fee (for outgoing transactions)
     * @type {string}
     * @memberof Transaction
     */
    'fee_amount'?: string;
    /**
     * Source addresses
     * @type {Array<string>}
     * @memberof Transaction
     */
    'from_addresses'?: Array<string>;
    /**
     * Destination addresses
     * @type {Array<string>}
     * @memberof Transaction
     */
    'to_addresses'?: Array<string>;
}
export declare const TransactionDirectionEnum: {
    readonly Incoming: "incoming";
    readonly Outgoing: "outgoing";
};
export type TransactionDirectionEnum = typeof TransactionDirectionEnum[keyof typeof TransactionDirectionEnum];
/**
 *
 * @export
 * @interface TransactionsGet200Response
 */
export interface TransactionsGet200Response {
    /**
     *
     * @type {string}
     * @memberof TransactionsGet200Response
     */
    'crypto_symbol': string;
    /**
     *
     * @type {string}
     * @memberof TransactionsGet200Response
     */
    'address': string;
    /**
     *
     * @type {Array<Transaction>}
     * @memberof TransactionsGet200Response
     */
    'transactions': Array<Transaction>;
    /**
     * Total number of transactions for this address
     * @type {number}
     * @memberof TransactionsGet200Response
     */
    'total_count': number;
    /**
     * Whether there are more transactions available
     * @type {boolean}
     * @memberof TransactionsGet200Response
     */
    'has_more': boolean;
}
/**
 *
 * @export
 * @interface UnsignedTxGet200Response
 */
export interface UnsignedTxGet200Response {
    /**
     *
     * @type {string}
     * @memberof UnsignedTxGet200Response
     */
    'crypto_symbol': string;
    /**
     *
     * @type {string}
     * @memberof UnsignedTxGet200Response
     */
    'from_address': string;
    /**
     *
     * @type {string}
     * @memberof UnsignedTxGet200Response
     */
    'to_address': string;
    /**
     *
     * @type {string}
     * @memberof UnsignedTxGet200Response
     */
    'amount': string;
    /**
     * Calculated transaction fee
     * @type {string}
     * @memberof UnsignedTxGet200Response
     */
    'fee_amount': string;
    /**
     * Base64 or hex encoded unsigned transaction or PSBT
     * @type {string}
     * @memberof UnsignedTxGet200Response
     */
    'unsigned_tx': string;
    /**
     * Estimated transaction size in bytes
     * @type {number}
     * @memberof UnsignedTxGet200Response
     */
    'tx_size_bytes'?: number;
}
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get balance for an address
     * @param {string} cryptoSymbol
     * @param {string} address
     * @param {string} [fiatSymbol]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balanceGet: (cryptoSymbol: string, address: string, fiatSymbol?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Broadcast signed transaction
     * @param {BroadcastPostRequest} broadcastPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    broadcastPost: (broadcastPostRequest: BroadcastPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get transaction history for an address
     * @param {string} cryptoSymbol
     * @param {string} address
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsGet: (cryptoSymbol: string, address: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Generate an unsigned transaction
     * @param {string} cryptoSymbol
     * @param {string} fromAddress
     * @param {string} toAddress
     * @param {string} amount
     * @param {number} [feeRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unsignedTxGet: (cryptoSymbol: string, fromAddress: string, toAddress: string, amount: string, feeRate?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get balance for an address
     * @param {string} cryptoSymbol
     * @param {string} address
     * @param {string} [fiatSymbol]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balanceGet(cryptoSymbol: string, address: string, fiatSymbol?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BalanceGet200Response>>;
    /**
     *
     * @summary Broadcast signed transaction
     * @param {BroadcastPostRequest} broadcastPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    broadcastPost(broadcastPostRequest: BroadcastPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BroadcastPost200Response>>;
    /**
     *
     * @summary Get transaction history for an address
     * @param {string} cryptoSymbol
     * @param {string} address
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsGet(cryptoSymbol: string, address: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsGet200Response>>;
    /**
     *
     * @summary Generate an unsigned transaction
     * @param {string} cryptoSymbol
     * @param {string} fromAddress
     * @param {string} toAddress
     * @param {string} amount
     * @param {number} [feeRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unsignedTxGet(cryptoSymbol: string, fromAddress: string, toAddress: string, amount: string, feeRate?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnsignedTxGet200Response>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get balance for an address
     * @param {string} cryptoSymbol
     * @param {string} address
     * @param {string} [fiatSymbol]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balanceGet(cryptoSymbol: string, address: string, fiatSymbol?: string, options?: RawAxiosRequestConfig): AxiosPromise<BalanceGet200Response>;
    /**
     *
     * @summary Broadcast signed transaction
     * @param {BroadcastPostRequest} broadcastPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    broadcastPost(broadcastPostRequest: BroadcastPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<BroadcastPost200Response>;
    /**
     *
     * @summary Get transaction history for an address
     * @param {string} cryptoSymbol
     * @param {string} address
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsGet(cryptoSymbol: string, address: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<TransactionsGet200Response>;
    /**
     *
     * @summary Generate an unsigned transaction
     * @param {string} cryptoSymbol
     * @param {string} fromAddress
     * @param {string} toAddress
     * @param {string} amount
     * @param {number} [feeRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unsignedTxGet(cryptoSymbol: string, fromAddress: string, toAddress: string, amount: string, feeRate?: number, options?: RawAxiosRequestConfig): AxiosPromise<UnsignedTxGet200Response>;
};
/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     *
     * @summary Get balance for an address
     * @param {string} cryptoSymbol
     * @param {string} address
     * @param {string} [fiatSymbol]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    balanceGet(cryptoSymbol: string, address: string, fiatSymbol?: string, options?: RawAxiosRequestConfig): AxiosPromise<BalanceGet200Response>;
    /**
     *
     * @summary Broadcast signed transaction
     * @param {BroadcastPostRequest} broadcastPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    broadcastPost(broadcastPostRequest: BroadcastPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<BroadcastPost200Response>;
    /**
     *
     * @summary Get transaction history for an address
     * @param {string} cryptoSymbol
     * @param {string} address
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    transactionsGet(cryptoSymbol: string, address: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<TransactionsGet200Response>;
    /**
     *
     * @summary Generate an unsigned transaction
     * @param {string} cryptoSymbol
     * @param {string} fromAddress
     * @param {string} toAddress
     * @param {string} amount
     * @param {number} [feeRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    unsignedTxGet(cryptoSymbol: string, fromAddress: string, toAddress: string, amount: string, feeRate?: number, options?: RawAxiosRequestConfig): AxiosPromise<UnsignedTxGet200Response>;
}
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     *
     * @summary Get balance for an address
     * @param {string} cryptoSymbol
     * @param {string} address
     * @param {string} [fiatSymbol]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    balanceGet(cryptoSymbol: string, address: string, fiatSymbol?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BalanceGet200Response, any, {}>>;
    /**
     *
     * @summary Broadcast signed transaction
     * @param {BroadcastPostRequest} broadcastPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    broadcastPost(broadcastPostRequest: BroadcastPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BroadcastPost200Response, any, {}>>;
    /**
     *
     * @summary Get transaction history for an address
     * @param {string} cryptoSymbol
     * @param {string} address
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transactionsGet(cryptoSymbol: string, address: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionsGet200Response, any, {}>>;
    /**
     *
     * @summary Generate an unsigned transaction
     * @param {string} cryptoSymbol
     * @param {string} fromAddress
     * @param {string} toAddress
     * @param {string} amount
     * @param {number} [feeRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    unsignedTxGet(cryptoSymbol: string, fromAddress: string, toAddress: string, amount: string, feeRate?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UnsignedTxGet200Response, any, {}>>;
}
//# sourceMappingURL=api.d.ts.map