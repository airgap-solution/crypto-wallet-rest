/*
Crypto Wallet REST API

REST API for air-gapped crypto wallets. Supports multiple cryptocurrencies with fiat currency conversion, future-proof. 

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptowalletrest

import (
	"encoding/json"
	"time"
)

// checks if the BalancesPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BalancesPost200Response{}

// BalancesPost200Response struct for BalancesPost200Response
type BalancesPost200Response struct {
	Results []BalancesPost200ResponseResultsInner `json:"results,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// NewBalancesPost200Response instantiates a new BalancesPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalancesPost200Response() *BalancesPost200Response {
	this := BalancesPost200Response{}
	return &this
}

// NewBalancesPost200ResponseWithDefaults instantiates a new BalancesPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalancesPost200ResponseWithDefaults() *BalancesPost200Response {
	this := BalancesPost200Response{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *BalancesPost200Response) GetResults() []BalancesPost200ResponseResultsInner {
	if o == nil || IsNil(o.Results) {
		var ret []BalancesPost200ResponseResultsInner
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalancesPost200Response) GetResultsOk() ([]BalancesPost200ResponseResultsInner, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *BalancesPost200Response) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []BalancesPost200ResponseResultsInner and assigns it to the Results field.
func (o *BalancesPost200Response) SetResults(v []BalancesPost200ResponseResultsInner) {
	o.Results = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *BalancesPost200Response) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalancesPost200Response) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *BalancesPost200Response) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *BalancesPost200Response) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o BalancesPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BalancesPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableBalancesPost200Response struct {
	value *BalancesPost200Response
	isSet bool
}

func (v NullableBalancesPost200Response) Get() *BalancesPost200Response {
	return v.value
}

func (v *NullableBalancesPost200Response) Set(val *BalancesPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableBalancesPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableBalancesPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalancesPost200Response(val *BalancesPost200Response) *NullableBalancesPost200Response {
	return &NullableBalancesPost200Response{value: val, isSet: true}
}

func (v NullableBalancesPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalancesPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


