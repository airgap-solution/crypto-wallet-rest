/*
Crypto Wallet REST API

REST API for air-gapped crypto wallets. Supports multiple cryptocurrencies with fiat currency conversion, future-proof. 

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptowalletrest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BalancesPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BalancesPostRequest{}

// BalancesPostRequest struct for BalancesPostRequest
type BalancesPostRequest struct {
	Requests []BalancesPostRequestRequestsInner `json:"requests"`
	// Default fiat currency symbol for all requests if not specified individually
	FiatSymbol *string `json:"fiat_symbol,omitempty"`
}

type _BalancesPostRequest BalancesPostRequest

// NewBalancesPostRequest instantiates a new BalancesPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalancesPostRequest(requests []BalancesPostRequestRequestsInner) *BalancesPostRequest {
	this := BalancesPostRequest{}
	this.Requests = requests
	var fiatSymbol string = "USD"
	this.FiatSymbol = &fiatSymbol
	return &this
}

// NewBalancesPostRequestWithDefaults instantiates a new BalancesPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalancesPostRequestWithDefaults() *BalancesPostRequest {
	this := BalancesPostRequest{}
	var fiatSymbol string = "USD"
	this.FiatSymbol = &fiatSymbol
	return &this
}

// GetRequests returns the Requests field value
func (o *BalancesPostRequest) GetRequests() []BalancesPostRequestRequestsInner {
	if o == nil {
		var ret []BalancesPostRequestRequestsInner
		return ret
	}

	return o.Requests
}

// GetRequestsOk returns a tuple with the Requests field value
// and a boolean to check if the value has been set.
func (o *BalancesPostRequest) GetRequestsOk() ([]BalancesPostRequestRequestsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Requests, true
}

// SetRequests sets field value
func (o *BalancesPostRequest) SetRequests(v []BalancesPostRequestRequestsInner) {
	o.Requests = v
}

// GetFiatSymbol returns the FiatSymbol field value if set, zero value otherwise.
func (o *BalancesPostRequest) GetFiatSymbol() string {
	if o == nil || IsNil(o.FiatSymbol) {
		var ret string
		return ret
	}
	return *o.FiatSymbol
}

// GetFiatSymbolOk returns a tuple with the FiatSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalancesPostRequest) GetFiatSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.FiatSymbol) {
		return nil, false
	}
	return o.FiatSymbol, true
}

// HasFiatSymbol returns a boolean if a field has been set.
func (o *BalancesPostRequest) HasFiatSymbol() bool {
	if o != nil && !IsNil(o.FiatSymbol) {
		return true
	}

	return false
}

// SetFiatSymbol gets a reference to the given string and assigns it to the FiatSymbol field.
func (o *BalancesPostRequest) SetFiatSymbol(v string) {
	o.FiatSymbol = &v
}

func (o BalancesPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BalancesPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["requests"] = o.Requests
	if !IsNil(o.FiatSymbol) {
		toSerialize["fiat_symbol"] = o.FiatSymbol
	}
	return toSerialize, nil
}

func (o *BalancesPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"requests",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBalancesPostRequest := _BalancesPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBalancesPostRequest)

	if err != nil {
		return err
	}

	*o = BalancesPostRequest(varBalancesPostRequest)

	return err
}

type NullableBalancesPostRequest struct {
	value *BalancesPostRequest
	isSet bool
}

func (v NullableBalancesPostRequest) Get() *BalancesPostRequest {
	return v.value
}

func (v *NullableBalancesPostRequest) Set(val *BalancesPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBalancesPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBalancesPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalancesPostRequest(val *BalancesPostRequest) *NullableBalancesPostRequest {
	return &NullableBalancesPostRequest{value: val, isSet: true}
}

func (v NullableBalancesPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalancesPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


