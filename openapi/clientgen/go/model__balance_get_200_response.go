/*
Crypto Wallet REST API

REST API for air-gapped crypto wallets. Supports multiple cryptocurrencies with fiat currency conversion, future-proof. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptowalletrest

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the BalanceGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BalanceGet200Response{}

// BalanceGet200Response struct for BalanceGet200Response
type BalanceGet200Response struct {
	// The cryptocurrency symbol
	CryptoSymbol string `json:"crypto_symbol"`
	// The queried address
	Address string `json:"address"`
	// Balance in the native cryptocurrency units
	CryptoBalance float64 `json:"crypto_balance"`
	// The fiat currency symbol used for conversion
	FiatSymbol string `json:"fiat_symbol"`
	// Equivalent value in the specified fiat currency
	FiatValue float64 `json:"fiat_value"`
	// Current exchange rate (crypto to fiat)
	ExchangeRate float64 `json:"exchange_rate"`
	// Timestamp when the balance was retrieved
	Timestamp time.Time `json:"timestamp"`
}

type _BalanceGet200Response BalanceGet200Response

// NewBalanceGet200Response instantiates a new BalanceGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalanceGet200Response(cryptoSymbol string, address string, cryptoBalance float64, fiatSymbol string, fiatValue float64, exchangeRate float64, timestamp time.Time) *BalanceGet200Response {
	this := BalanceGet200Response{}
	this.CryptoSymbol = cryptoSymbol
	this.Address = address
	this.CryptoBalance = cryptoBalance
	this.FiatSymbol = fiatSymbol
	this.FiatValue = fiatValue
	this.ExchangeRate = exchangeRate
	this.Timestamp = timestamp
	return &this
}

// NewBalanceGet200ResponseWithDefaults instantiates a new BalanceGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalanceGet200ResponseWithDefaults() *BalanceGet200Response {
	this := BalanceGet200Response{}
	return &this
}

// GetCryptoSymbol returns the CryptoSymbol field value
func (o *BalanceGet200Response) GetCryptoSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CryptoSymbol
}

// GetCryptoSymbolOk returns a tuple with the CryptoSymbol field value
// and a boolean to check if the value has been set.
func (o *BalanceGet200Response) GetCryptoSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CryptoSymbol, true
}

// SetCryptoSymbol sets field value
func (o *BalanceGet200Response) SetCryptoSymbol(v string) {
	o.CryptoSymbol = v
}

// GetAddress returns the Address field value
func (o *BalanceGet200Response) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *BalanceGet200Response) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *BalanceGet200Response) SetAddress(v string) {
	o.Address = v
}

// GetCryptoBalance returns the CryptoBalance field value
func (o *BalanceGet200Response) GetCryptoBalance() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.CryptoBalance
}

// GetCryptoBalanceOk returns a tuple with the CryptoBalance field value
// and a boolean to check if the value has been set.
func (o *BalanceGet200Response) GetCryptoBalanceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CryptoBalance, true
}

// SetCryptoBalance sets field value
func (o *BalanceGet200Response) SetCryptoBalance(v float64) {
	o.CryptoBalance = v
}

// GetFiatSymbol returns the FiatSymbol field value
func (o *BalanceGet200Response) GetFiatSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FiatSymbol
}

// GetFiatSymbolOk returns a tuple with the FiatSymbol field value
// and a boolean to check if the value has been set.
func (o *BalanceGet200Response) GetFiatSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FiatSymbol, true
}

// SetFiatSymbol sets field value
func (o *BalanceGet200Response) SetFiatSymbol(v string) {
	o.FiatSymbol = v
}

// GetFiatValue returns the FiatValue field value
func (o *BalanceGet200Response) GetFiatValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.FiatValue
}

// GetFiatValueOk returns a tuple with the FiatValue field value
// and a boolean to check if the value has been set.
func (o *BalanceGet200Response) GetFiatValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FiatValue, true
}

// SetFiatValue sets field value
func (o *BalanceGet200Response) SetFiatValue(v float64) {
	o.FiatValue = v
}

// GetExchangeRate returns the ExchangeRate field value
func (o *BalanceGet200Response) GetExchangeRate() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ExchangeRate
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value
// and a boolean to check if the value has been set.
func (o *BalanceGet200Response) GetExchangeRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExchangeRate, true
}

// SetExchangeRate sets field value
func (o *BalanceGet200Response) SetExchangeRate(v float64) {
	o.ExchangeRate = v
}

// GetTimestamp returns the Timestamp field value
func (o *BalanceGet200Response) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *BalanceGet200Response) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *BalanceGet200Response) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

func (o BalanceGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BalanceGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["crypto_symbol"] = o.CryptoSymbol
	toSerialize["address"] = o.Address
	toSerialize["crypto_balance"] = o.CryptoBalance
	toSerialize["fiat_symbol"] = o.FiatSymbol
	toSerialize["fiat_value"] = o.FiatValue
	toSerialize["exchange_rate"] = o.ExchangeRate
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *BalanceGet200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"crypto_symbol",
		"address",
		"crypto_balance",
		"fiat_symbol",
		"fiat_value",
		"exchange_rate",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBalanceGet200Response := _BalanceGet200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBalanceGet200Response)

	if err != nil {
		return err
	}

	*o = BalanceGet200Response(varBalanceGet200Response)

	return err
}

type NullableBalanceGet200Response struct {
	value *BalanceGet200Response
	isSet bool
}

func (v NullableBalanceGet200Response) Get() *BalanceGet200Response {
	return v.value
}

func (v *NullableBalanceGet200Response) Set(val *BalanceGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableBalanceGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableBalanceGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalanceGet200Response(val *BalanceGet200Response) *NullableBalanceGet200Response {
	return &NullableBalanceGet200Response{value: val, isSet: true}
}

func (v NullableBalanceGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalanceGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


