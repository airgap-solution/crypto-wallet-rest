/*
Crypto Wallet REST API

REST API for air-gapped crypto wallets. Supports multiple cryptocurrencies, future-proof. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptowalletrest

import (
	"encoding/json"
)

// checks if the BroadcastPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BroadcastPostRequest{}

// BroadcastPostRequest struct for BroadcastPostRequest
type BroadcastPostRequest struct {
	// The cryptocurrency symbol
	Crypto *string `json:"crypto,omitempty"`
	// Base64 / hex encoded signed transaction
	SignedTx *string `json:"signedTx,omitempty"`
}

// NewBroadcastPostRequest instantiates a new BroadcastPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBroadcastPostRequest() *BroadcastPostRequest {
	this := BroadcastPostRequest{}
	return &this
}

// NewBroadcastPostRequestWithDefaults instantiates a new BroadcastPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBroadcastPostRequestWithDefaults() *BroadcastPostRequest {
	this := BroadcastPostRequest{}
	return &this
}

// GetCrypto returns the Crypto field value if set, zero value otherwise.
func (o *BroadcastPostRequest) GetCrypto() string {
	if o == nil || IsNil(o.Crypto) {
		var ret string
		return ret
	}
	return *o.Crypto
}

// GetCryptoOk returns a tuple with the Crypto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BroadcastPostRequest) GetCryptoOk() (*string, bool) {
	if o == nil || IsNil(o.Crypto) {
		return nil, false
	}
	return o.Crypto, true
}

// HasCrypto returns a boolean if a field has been set.
func (o *BroadcastPostRequest) HasCrypto() bool {
	if o != nil && !IsNil(o.Crypto) {
		return true
	}

	return false
}

// SetCrypto gets a reference to the given string and assigns it to the Crypto field.
func (o *BroadcastPostRequest) SetCrypto(v string) {
	o.Crypto = &v
}

// GetSignedTx returns the SignedTx field value if set, zero value otherwise.
func (o *BroadcastPostRequest) GetSignedTx() string {
	if o == nil || IsNil(o.SignedTx) {
		var ret string
		return ret
	}
	return *o.SignedTx
}

// GetSignedTxOk returns a tuple with the SignedTx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BroadcastPostRequest) GetSignedTxOk() (*string, bool) {
	if o == nil || IsNil(o.SignedTx) {
		return nil, false
	}
	return o.SignedTx, true
}

// HasSignedTx returns a boolean if a field has been set.
func (o *BroadcastPostRequest) HasSignedTx() bool {
	if o != nil && !IsNil(o.SignedTx) {
		return true
	}

	return false
}

// SetSignedTx gets a reference to the given string and assigns it to the SignedTx field.
func (o *BroadcastPostRequest) SetSignedTx(v string) {
	o.SignedTx = &v
}

func (o BroadcastPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BroadcastPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Crypto) {
		toSerialize["crypto"] = o.Crypto
	}
	if !IsNil(o.SignedTx) {
		toSerialize["signedTx"] = o.SignedTx
	}
	return toSerialize, nil
}

type NullableBroadcastPostRequest struct {
	value *BroadcastPostRequest
	isSet bool
}

func (v NullableBroadcastPostRequest) Get() *BroadcastPostRequest {
	return v.value
}

func (v *NullableBroadcastPostRequest) Set(val *BroadcastPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBroadcastPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBroadcastPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBroadcastPostRequest(val *BroadcastPostRequest) *NullableBroadcastPostRequest {
	return &NullableBroadcastPostRequest{value: val, isSet: true}
}

func (v NullableBroadcastPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBroadcastPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


