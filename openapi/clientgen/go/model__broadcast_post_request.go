/*
Crypto Wallet REST API

REST API for air-gapped crypto wallets. Supports multiple cryptocurrencies with fiat currency conversion, future-proof. 

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptowalletrest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BroadcastPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BroadcastPostRequest{}

// BroadcastPostRequest struct for BroadcastPostRequest
type BroadcastPostRequest struct {
	CryptoSymbol string `json:"crypto_symbol"`
	SignedTx string `json:"signed_tx"`
}

type _BroadcastPostRequest BroadcastPostRequest

// NewBroadcastPostRequest instantiates a new BroadcastPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBroadcastPostRequest(cryptoSymbol string, signedTx string) *BroadcastPostRequest {
	this := BroadcastPostRequest{}
	this.CryptoSymbol = cryptoSymbol
	this.SignedTx = signedTx
	return &this
}

// NewBroadcastPostRequestWithDefaults instantiates a new BroadcastPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBroadcastPostRequestWithDefaults() *BroadcastPostRequest {
	this := BroadcastPostRequest{}
	return &this
}

// GetCryptoSymbol returns the CryptoSymbol field value
func (o *BroadcastPostRequest) GetCryptoSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CryptoSymbol
}

// GetCryptoSymbolOk returns a tuple with the CryptoSymbol field value
// and a boolean to check if the value has been set.
func (o *BroadcastPostRequest) GetCryptoSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CryptoSymbol, true
}

// SetCryptoSymbol sets field value
func (o *BroadcastPostRequest) SetCryptoSymbol(v string) {
	o.CryptoSymbol = v
}

// GetSignedTx returns the SignedTx field value
func (o *BroadcastPostRequest) GetSignedTx() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignedTx
}

// GetSignedTxOk returns a tuple with the SignedTx field value
// and a boolean to check if the value has been set.
func (o *BroadcastPostRequest) GetSignedTxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignedTx, true
}

// SetSignedTx sets field value
func (o *BroadcastPostRequest) SetSignedTx(v string) {
	o.SignedTx = v
}

func (o BroadcastPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BroadcastPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["crypto_symbol"] = o.CryptoSymbol
	toSerialize["signed_tx"] = o.SignedTx
	return toSerialize, nil
}

func (o *BroadcastPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"crypto_symbol",
		"signed_tx",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBroadcastPostRequest := _BroadcastPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBroadcastPostRequest)

	if err != nil {
		return err
	}

	*o = BroadcastPostRequest(varBroadcastPostRequest)

	return err
}

type NullableBroadcastPostRequest struct {
	value *BroadcastPostRequest
	isSet bool
}

func (v NullableBroadcastPostRequest) Get() *BroadcastPostRequest {
	return v.value
}

func (v *NullableBroadcastPostRequest) Set(val *BroadcastPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBroadcastPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBroadcastPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBroadcastPostRequest(val *BroadcastPostRequest) *NullableBroadcastPostRequest {
	return &NullableBroadcastPostRequest{value: val, isSet: true}
}

func (v NullableBroadcastPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBroadcastPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


