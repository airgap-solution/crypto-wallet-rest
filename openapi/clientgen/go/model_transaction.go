/*
Crypto Wallet REST API

REST API for air-gapped crypto wallets. Supports multiple cryptocurrencies with fiat currency conversion, future-proof. 

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptowalletrest

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Transaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transaction{}

// Transaction struct for Transaction
type Transaction struct {
	TransactionId string `json:"transaction_id"`
	BlockHeight *int32 `json:"block_height,omitempty"`
	Timestamp time.Time `json:"timestamp"`
	Amount string `json:"amount"`
	Direction string `json:"direction"`
	Confirmations int32 `json:"confirmations"`
	FeeAmount *string `json:"fee_amount,omitempty"`
	FromAddresses []string `json:"from_addresses,omitempty"`
	ToAddresses []string `json:"to_addresses,omitempty"`
}

type _Transaction Transaction

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction(transactionId string, timestamp time.Time, amount string, direction string, confirmations int32) *Transaction {
	this := Transaction{}
	this.TransactionId = transactionId
	this.Timestamp = timestamp
	this.Amount = amount
	this.Direction = direction
	this.Confirmations = confirmations
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetTransactionId returns the TransactionId field value
func (o *Transaction) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *Transaction) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetBlockHeight returns the BlockHeight field value if set, zero value otherwise.
func (o *Transaction) GetBlockHeight() int32 {
	if o == nil || IsNil(o.BlockHeight) {
		var ret int32
		return ret
	}
	return *o.BlockHeight
}

// GetBlockHeightOk returns a tuple with the BlockHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetBlockHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.BlockHeight) {
		return nil, false
	}
	return o.BlockHeight, true
}

// HasBlockHeight returns a boolean if a field has been set.
func (o *Transaction) HasBlockHeight() bool {
	if o != nil && !IsNil(o.BlockHeight) {
		return true
	}

	return false
}

// SetBlockHeight gets a reference to the given int32 and assigns it to the BlockHeight field.
func (o *Transaction) SetBlockHeight(v int32) {
	o.BlockHeight = &v
}

// GetTimestamp returns the Timestamp field value
func (o *Transaction) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Transaction) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetAmount returns the Amount field value
func (o *Transaction) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Transaction) SetAmount(v string) {
	o.Amount = v
}

// GetDirection returns the Direction field value
func (o *Transaction) GetDirection() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetDirectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *Transaction) SetDirection(v string) {
	o.Direction = v
}

// GetConfirmations returns the Confirmations field value
func (o *Transaction) GetConfirmations() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Confirmations
}

// GetConfirmationsOk returns a tuple with the Confirmations field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetConfirmationsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Confirmations, true
}

// SetConfirmations sets field value
func (o *Transaction) SetConfirmations(v int32) {
	o.Confirmations = v
}

// GetFeeAmount returns the FeeAmount field value if set, zero value otherwise.
func (o *Transaction) GetFeeAmount() string {
	if o == nil || IsNil(o.FeeAmount) {
		var ret string
		return ret
	}
	return *o.FeeAmount
}

// GetFeeAmountOk returns a tuple with the FeeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetFeeAmountOk() (*string, bool) {
	if o == nil || IsNil(o.FeeAmount) {
		return nil, false
	}
	return o.FeeAmount, true
}

// HasFeeAmount returns a boolean if a field has been set.
func (o *Transaction) HasFeeAmount() bool {
	if o != nil && !IsNil(o.FeeAmount) {
		return true
	}

	return false
}

// SetFeeAmount gets a reference to the given string and assigns it to the FeeAmount field.
func (o *Transaction) SetFeeAmount(v string) {
	o.FeeAmount = &v
}

// GetFromAddresses returns the FromAddresses field value if set, zero value otherwise.
func (o *Transaction) GetFromAddresses() []string {
	if o == nil || IsNil(o.FromAddresses) {
		var ret []string
		return ret
	}
	return o.FromAddresses
}

// GetFromAddressesOk returns a tuple with the FromAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetFromAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.FromAddresses) {
		return nil, false
	}
	return o.FromAddresses, true
}

// HasFromAddresses returns a boolean if a field has been set.
func (o *Transaction) HasFromAddresses() bool {
	if o != nil && !IsNil(o.FromAddresses) {
		return true
	}

	return false
}

// SetFromAddresses gets a reference to the given []string and assigns it to the FromAddresses field.
func (o *Transaction) SetFromAddresses(v []string) {
	o.FromAddresses = v
}

// GetToAddresses returns the ToAddresses field value if set, zero value otherwise.
func (o *Transaction) GetToAddresses() []string {
	if o == nil || IsNil(o.ToAddresses) {
		var ret []string
		return ret
	}
	return o.ToAddresses
}

// GetToAddressesOk returns a tuple with the ToAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetToAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.ToAddresses) {
		return nil, false
	}
	return o.ToAddresses, true
}

// HasToAddresses returns a boolean if a field has been set.
func (o *Transaction) HasToAddresses() bool {
	if o != nil && !IsNil(o.ToAddresses) {
		return true
	}

	return false
}

// SetToAddresses gets a reference to the given []string and assigns it to the ToAddresses field.
func (o *Transaction) SetToAddresses(v []string) {
	o.ToAddresses = v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transaction_id"] = o.TransactionId
	if !IsNil(o.BlockHeight) {
		toSerialize["block_height"] = o.BlockHeight
	}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["amount"] = o.Amount
	toSerialize["direction"] = o.Direction
	toSerialize["confirmations"] = o.Confirmations
	if !IsNil(o.FeeAmount) {
		toSerialize["fee_amount"] = o.FeeAmount
	}
	if !IsNil(o.FromAddresses) {
		toSerialize["from_addresses"] = o.FromAddresses
	}
	if !IsNil(o.ToAddresses) {
		toSerialize["to_addresses"] = o.ToAddresses
	}
	return toSerialize, nil
}

func (o *Transaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transaction_id",
		"timestamp",
		"amount",
		"direction",
		"confirmations",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransaction := _Transaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransaction)

	if err != nil {
		return err
	}

	*o = Transaction(varTransaction)

	return err
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


