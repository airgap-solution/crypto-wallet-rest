/*
Crypto Wallet REST API

REST API for air-gapped crypto wallets. Supports multiple cryptocurrencies with fiat currency conversion, future-proof. 

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptowalletrest

import (
	"encoding/json"
	"time"
)

// checks if the BalancesGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BalancesGet200Response{}

// BalancesGet200Response struct for BalancesGet200Response
type BalancesGet200Response struct {
	Results []BalancesGet200ResponseResultsInner `json:"results,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// NewBalancesGet200Response instantiates a new BalancesGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalancesGet200Response() *BalancesGet200Response {
	this := BalancesGet200Response{}
	return &this
}

// NewBalancesGet200ResponseWithDefaults instantiates a new BalancesGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalancesGet200ResponseWithDefaults() *BalancesGet200Response {
	this := BalancesGet200Response{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *BalancesGet200Response) GetResults() []BalancesGet200ResponseResultsInner {
	if o == nil || IsNil(o.Results) {
		var ret []BalancesGet200ResponseResultsInner
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalancesGet200Response) GetResultsOk() ([]BalancesGet200ResponseResultsInner, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *BalancesGet200Response) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []BalancesGet200ResponseResultsInner and assigns it to the Results field.
func (o *BalancesGet200Response) SetResults(v []BalancesGet200ResponseResultsInner) {
	o.Results = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *BalancesGet200Response) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalancesGet200Response) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *BalancesGet200Response) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *BalancesGet200Response) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o BalancesGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BalancesGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableBalancesGet200Response struct {
	value *BalancesGet200Response
	isSet bool
}

func (v NullableBalancesGet200Response) Get() *BalancesGet200Response {
	return v.value
}

func (v *NullableBalancesGet200Response) Set(val *BalancesGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableBalancesGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableBalancesGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalancesGet200Response(val *BalancesGet200Response) *NullableBalancesGet200Response {
	return &NullableBalancesGet200Response{value: val, isSet: true}
}

func (v NullableBalancesGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalancesGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


