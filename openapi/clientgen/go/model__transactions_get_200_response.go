/*
Crypto Wallet REST API

REST API for air-gapped crypto wallets. Supports multiple cryptocurrencies with fiat currency conversion, future-proof. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptowalletrest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionsGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionsGet200Response{}

// TransactionsGet200Response struct for TransactionsGet200Response
type TransactionsGet200Response struct {
	CryptoSymbol string `json:"crypto_symbol"`
	Address string `json:"address"`
	Transactions []Transaction `json:"transactions"`
	// Total number of transactions for this address
	TotalCount int32 `json:"total_count"`
	// Whether there are more transactions available
	HasMore bool `json:"has_more"`
}

type _TransactionsGet200Response TransactionsGet200Response

// NewTransactionsGet200Response instantiates a new TransactionsGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionsGet200Response(cryptoSymbol string, address string, transactions []Transaction, totalCount int32, hasMore bool) *TransactionsGet200Response {
	this := TransactionsGet200Response{}
	this.CryptoSymbol = cryptoSymbol
	this.Address = address
	this.Transactions = transactions
	this.TotalCount = totalCount
	this.HasMore = hasMore
	return &this
}

// NewTransactionsGet200ResponseWithDefaults instantiates a new TransactionsGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionsGet200ResponseWithDefaults() *TransactionsGet200Response {
	this := TransactionsGet200Response{}
	return &this
}

// GetCryptoSymbol returns the CryptoSymbol field value
func (o *TransactionsGet200Response) GetCryptoSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CryptoSymbol
}

// GetCryptoSymbolOk returns a tuple with the CryptoSymbol field value
// and a boolean to check if the value has been set.
func (o *TransactionsGet200Response) GetCryptoSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CryptoSymbol, true
}

// SetCryptoSymbol sets field value
func (o *TransactionsGet200Response) SetCryptoSymbol(v string) {
	o.CryptoSymbol = v
}

// GetAddress returns the Address field value
func (o *TransactionsGet200Response) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *TransactionsGet200Response) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *TransactionsGet200Response) SetAddress(v string) {
	o.Address = v
}

// GetTransactions returns the Transactions field value
func (o *TransactionsGet200Response) GetTransactions() []Transaction {
	if o == nil {
		var ret []Transaction
		return ret
	}

	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value
// and a boolean to check if the value has been set.
func (o *TransactionsGet200Response) GetTransactionsOk() ([]Transaction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transactions, true
}

// SetTransactions sets field value
func (o *TransactionsGet200Response) SetTransactions(v []Transaction) {
	o.Transactions = v
}

// GetTotalCount returns the TotalCount field value
func (o *TransactionsGet200Response) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *TransactionsGet200Response) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *TransactionsGet200Response) SetTotalCount(v int32) {
	o.TotalCount = v
}

// GetHasMore returns the HasMore field value
func (o *TransactionsGet200Response) GetHasMore() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value
// and a boolean to check if the value has been set.
func (o *TransactionsGet200Response) GetHasMoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasMore, true
}

// SetHasMore sets field value
func (o *TransactionsGet200Response) SetHasMore(v bool) {
	o.HasMore = v
}

func (o TransactionsGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionsGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["crypto_symbol"] = o.CryptoSymbol
	toSerialize["address"] = o.Address
	toSerialize["transactions"] = o.Transactions
	toSerialize["total_count"] = o.TotalCount
	toSerialize["has_more"] = o.HasMore
	return toSerialize, nil
}

func (o *TransactionsGet200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"crypto_symbol",
		"address",
		"transactions",
		"total_count",
		"has_more",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionsGet200Response := _TransactionsGet200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionsGet200Response)

	if err != nil {
		return err
	}

	*o = TransactionsGet200Response(varTransactionsGet200Response)

	return err
}

type NullableTransactionsGet200Response struct {
	value *TransactionsGet200Response
	isSet bool
}

func (v NullableTransactionsGet200Response) Get() *TransactionsGet200Response {
	return v.value
}

func (v *NullableTransactionsGet200Response) Set(val *TransactionsGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionsGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionsGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionsGet200Response(val *TransactionsGet200Response) *NullableTransactionsGet200Response {
	return &NullableTransactionsGet200Response{value: val, isSet: true}
}

func (v NullableTransactionsGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionsGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


