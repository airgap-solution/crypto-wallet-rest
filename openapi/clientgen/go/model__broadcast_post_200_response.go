/*
Crypto Wallet REST API

REST API for air-gapped crypto wallets. Supports multiple cryptocurrencies with fiat currency conversion, future-proof. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptowalletrest

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the BroadcastPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BroadcastPost200Response{}

// BroadcastPost200Response struct for BroadcastPost200Response
type BroadcastPost200Response struct {
	CryptoSymbol string `json:"crypto_symbol"`
	// Transaction hash/ID
	TransactionId string `json:"transaction_id"`
	Status string `json:"status"`
	// Human-readable status message
	Message string `json:"message"`
	// Actual network fee paid
	NetworkFee *string `json:"network_fee,omitempty"`
	Timestamp time.Time `json:"timestamp"`
}

type _BroadcastPost200Response BroadcastPost200Response

// NewBroadcastPost200Response instantiates a new BroadcastPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBroadcastPost200Response(cryptoSymbol string, transactionId string, status string, message string, timestamp time.Time) *BroadcastPost200Response {
	this := BroadcastPost200Response{}
	this.CryptoSymbol = cryptoSymbol
	this.TransactionId = transactionId
	this.Status = status
	this.Message = message
	this.Timestamp = timestamp
	return &this
}

// NewBroadcastPost200ResponseWithDefaults instantiates a new BroadcastPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBroadcastPost200ResponseWithDefaults() *BroadcastPost200Response {
	this := BroadcastPost200Response{}
	return &this
}

// GetCryptoSymbol returns the CryptoSymbol field value
func (o *BroadcastPost200Response) GetCryptoSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CryptoSymbol
}

// GetCryptoSymbolOk returns a tuple with the CryptoSymbol field value
// and a boolean to check if the value has been set.
func (o *BroadcastPost200Response) GetCryptoSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CryptoSymbol, true
}

// SetCryptoSymbol sets field value
func (o *BroadcastPost200Response) SetCryptoSymbol(v string) {
	o.CryptoSymbol = v
}

// GetTransactionId returns the TransactionId field value
func (o *BroadcastPost200Response) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *BroadcastPost200Response) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *BroadcastPost200Response) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetStatus returns the Status field value
func (o *BroadcastPost200Response) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BroadcastPost200Response) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BroadcastPost200Response) SetStatus(v string) {
	o.Status = v
}

// GetMessage returns the Message field value
func (o *BroadcastPost200Response) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *BroadcastPost200Response) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *BroadcastPost200Response) SetMessage(v string) {
	o.Message = v
}

// GetNetworkFee returns the NetworkFee field value if set, zero value otherwise.
func (o *BroadcastPost200Response) GetNetworkFee() string {
	if o == nil || IsNil(o.NetworkFee) {
		var ret string
		return ret
	}
	return *o.NetworkFee
}

// GetNetworkFeeOk returns a tuple with the NetworkFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BroadcastPost200Response) GetNetworkFeeOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkFee) {
		return nil, false
	}
	return o.NetworkFee, true
}

// HasNetworkFee returns a boolean if a field has been set.
func (o *BroadcastPost200Response) HasNetworkFee() bool {
	if o != nil && !IsNil(o.NetworkFee) {
		return true
	}

	return false
}

// SetNetworkFee gets a reference to the given string and assigns it to the NetworkFee field.
func (o *BroadcastPost200Response) SetNetworkFee(v string) {
	o.NetworkFee = &v
}

// GetTimestamp returns the Timestamp field value
func (o *BroadcastPost200Response) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *BroadcastPost200Response) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *BroadcastPost200Response) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

func (o BroadcastPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BroadcastPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["crypto_symbol"] = o.CryptoSymbol
	toSerialize["transaction_id"] = o.TransactionId
	toSerialize["status"] = o.Status
	toSerialize["message"] = o.Message
	if !IsNil(o.NetworkFee) {
		toSerialize["network_fee"] = o.NetworkFee
	}
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *BroadcastPost200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"crypto_symbol",
		"transaction_id",
		"status",
		"message",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBroadcastPost200Response := _BroadcastPost200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBroadcastPost200Response)

	if err != nil {
		return err
	}

	*o = BroadcastPost200Response(varBroadcastPost200Response)

	return err
}

type NullableBroadcastPost200Response struct {
	value *BroadcastPost200Response
	isSet bool
}

func (v NullableBroadcastPost200Response) Get() *BroadcastPost200Response {
	return v.value
}

func (v *NullableBroadcastPost200Response) Set(val *BroadcastPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableBroadcastPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableBroadcastPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBroadcastPost200Response(val *BroadcastPost200Response) *NullableBroadcastPost200Response {
	return &NullableBroadcastPost200Response{value: val, isSet: true}
}

func (v NullableBroadcastPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBroadcastPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


