// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Crypto Wallet REST API
 *
 * REST API for air-gapped crypto wallets. Supports multiple cryptocurrencies, future-proof. 
 *
 * API version: 1.0.0
 */

package cryptowalletrest

import (
	"encoding/json"
	"net/http"
	"strings"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) *DefaultAPIController {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"BalanceGet": Route{
			"BalanceGet",
			strings.ToUpper("Get"),
			"/balance",
			c.BalanceGet,
		},
		"TransactionsGet": Route{
			"TransactionsGet",
			strings.ToUpper("Get"),
			"/transactions",
			c.TransactionsGet,
		},
		"UnsignedTxGet": Route{
			"UnsignedTxGet",
			strings.ToUpper("Get"),
			"/unsigned-tx",
			c.UnsignedTxGet,
		},
		"BroadcastPost": Route{
			"BroadcastPost",
			strings.ToUpper("Post"),
			"/broadcast",
			c.BroadcastPost,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the DefaultAPIController
func (c *DefaultAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"BalanceGet",
			strings.ToUpper("Get"),
			"/balance",
			c.BalanceGet,
		},
		Route{
			"TransactionsGet",
			strings.ToUpper("Get"),
			"/transactions",
			c.TransactionsGet,
		},
		Route{
			"UnsignedTxGet",
			strings.ToUpper("Get"),
			"/unsigned-tx",
			c.UnsignedTxGet,
		},
		Route{
			"BroadcastPost",
			strings.ToUpper("Post"),
			"/broadcast",
			c.BroadcastPost,
		},
	}
}



// BalanceGet - Get balance for an address
func (c *DefaultAPIController) BalanceGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var cryptoParam string
	if query.Has("crypto") {
		param := query.Get("crypto")

		cryptoParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "crypto"}, nil)
		return
	}
	var addressParam string
	if query.Has("address") {
		param := query.Get("address")

		addressParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "address"}, nil)
		return
	}
	result, err := c.service.BalanceGet(r.Context(), cryptoParam, addressParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// TransactionsGet - Get transaction history for an address
func (c *DefaultAPIController) TransactionsGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var cryptoParam string
	if query.Has("crypto") {
		param := query.Get("crypto")

		cryptoParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "crypto"}, nil)
		return
	}
	var addressParam string
	if query.Has("address") {
		param := query.Get("address")

		addressParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "address"}, nil)
		return
	}
	result, err := c.service.TransactionsGet(r.Context(), cryptoParam, addressParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UnsignedTxGet - Generate an unsigned transaction
func (c *DefaultAPIController) UnsignedTxGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var cryptoParam string
	if query.Has("crypto") {
		param := query.Get("crypto")

		cryptoParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "crypto"}, nil)
		return
	}
	var fromParam string
	if query.Has("from") {
		param := query.Get("from")

		fromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "from"}, nil)
		return
	}
	var toParam string
	if query.Has("to") {
		param := query.Get("to")

		toParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "to"}, nil)
		return
	}
	var amountParam string
	if query.Has("amount") {
		param := query.Get("amount")

		amountParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "amount"}, nil)
		return
	}
	result, err := c.service.UnsignedTxGet(r.Context(), cryptoParam, fromParam, toParam, amountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BroadcastPost - Broadcast signed transaction
func (c *DefaultAPIController) BroadcastPost(w http.ResponseWriter, r *http.Request) {
	var broadcastPostRequestParam BroadcastPostRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&broadcastPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBroadcastPostRequestRequired(broadcastPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBroadcastPostRequestConstraints(broadcastPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BroadcastPost(r.Context(), broadcastPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
