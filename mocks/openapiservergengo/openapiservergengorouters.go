// Code generated by MockGen. DO NOT EDIT.
// Source: ./openapi/servergen/go/routers.go
//
// Generated by this command:
//
//	mockgen -source=./openapi/servergen/go/routers.go -destination=mocks/openapiservergengo/openapiservergengorouters.go -package=openapiservergengomocks
//

// Package openapiservergengomocks is a generated GoMock package.
package openapiservergengomocks

import (
	reflect "reflect"

	cryptowalletrest "github.com/airgap-solution/crypto-wallet-rest/openapi/servergen/go"
	gomock "go.uber.org/mock/gomock"
)

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
	isgomock struct{}
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// OrderedRoutes mocks base method.
func (m *MockRouter) OrderedRoutes() []cryptowalletrest.Route {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderedRoutes")
	ret0, _ := ret[0].([]cryptowalletrest.Route)
	return ret0
}

// OrderedRoutes indicates an expected call of OrderedRoutes.
func (mr *MockRouterMockRecorder) OrderedRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderedRoutes", reflect.TypeOf((*MockRouter)(nil).OrderedRoutes))
}

// Routes mocks base method.
func (m *MockRouter) Routes() cryptowalletrest.Routes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Routes")
	ret0, _ := ret[0].(cryptowalletrest.Routes)
	return ret0
}

// Routes indicates an expected call of Routes.
func (mr *MockRouterMockRecorder) Routes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Routes", reflect.TypeOf((*MockRouter)(nil).Routes))
}
